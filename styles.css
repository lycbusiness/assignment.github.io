body, html {  
    margin: 0;  
    padding: 0;  
    height: 100%;  
    width: 100%; /* 确保body和html占满整个浏览器窗口 */  
    overflow: hidden; /* 防止内容溢出，特别是在图片重叠时 */  
}  
  
.image-container {  
    position: relative;  
    width: 100%; /* 使容器宽度与浏览器窗口一致 */  
    height: auto; /* 高度自动，根据内容或后续CSS调整 */  
    max-height: 100vh; /* 限制最大高度为视口高度，防止内容超出 */  
    display: flex; /* 使用Flexbox布局 */  
    flex-direction: column; /* 子元素垂直排列 */  
    align-items: center; /* 子元素在交叉轴上居中对齐（此处为水平方向） */  
    justify-content: center; /* 子元素在主轴上居中对齐（此处为垂直方向），但此处可能不适用，因为我们希望图片堆叠 */  
    /* 注意：由于我们想要图片堆叠，所以flex的默认布局可能不是最佳选择，但这里保留以展示Flexbox用法 */  
    /* 实际上，我们可能不需要flex布局，因为图片将使用绝对定位 */  
}  
  
/* 移除flex布局相关的CSS属性，因为我们不使用它进行图片堆叠 */  
/* .image-container现在只需保留position: relative; 和宽高设置 */  
  
.image-container img {  
    position: absolute; /* 绝对定位 */  
    width: 100%; /* 宽度设置为100%，但需注意这可能会导致图片高度超出容器 */  
    height: auto; /* 高度自动，保持原比例缩放 */  
    object-fit: cover; /* 图片保持其宽高比并覆盖整个容器宽度 */  
    /* 注意：由于我们设置了width为100%，object-fit: cover;将确保图片覆盖整个宽度，  
    但可能会裁剪图片的顶部或底部以保持比例 */  
}  
  
.top-image {  
    top: 0;  
    left: 0;  
    z-index: 10; /* 设置较高的z-index，使其位于上层 */  
}  
  
/* 为第二张上层图片添加特定的样式（如透明度或位移），以便与第一张区分 */  
.overlay {  
    opacity: 0.8; /* 设置透明度 */  
    /* 可以添加其他样式，如transform: translateX()或translateY()进行位移 */  
}  
  
.bottom-image {  
    z-index: 1; /* 设置较低的z-index，使其位于下层 */  
    /* 可能需要调整top属性以确保其位于上层图片之下 */  
    /* 但由于我们使用了absolute定位且z-index较低，它自然会位于下层 */  
}  
  
/* 注意：如果.bottom-image需要完全可见且不被上层图片遮挡，  
则可能需要调整其位置（使用top、left等属性）或改变布局策略 */  
  
/* 然而，在本例中，由于我们想要上层图片完全覆盖下层图片（或部分覆盖），  
所以不需要对.bottom-image进行额外的位置调整 */
